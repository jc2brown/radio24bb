
#ifndef DAC_H
#define DAC_H





static double outa_filter0_coef[21] = {
		/*
		    0.018121627, -0.0025737102, -0.049848193,
			-0.048790703, 0.046189787, 0.086422509, -0.075657994, -0.24352923, -0.050645060,
			0.45368918, 0.73324356, 0.45368918, -0.050645060, -0.24352923, -0.075657994,
			0.086422509, 0.046189787, -0.048790703, -0.049848193, -0.0025737102, 0.018121627
			*/
			/*
			0.0020676081, -0.0010862434, -0.028109706,
		        -0.015849916, 0.0067964367, 0.0043629139, 0.015229101, -0.12102499, -0.24878713,
		        0.37998359, 1.0128367, 0.37998359, -0.24878713, -0.12102499, 0.015229101,
		        0.0043629139, 0.0067964367, -0.015849916, -0.028109706, -0.0010862434, 0.0020676081
		        */
		        /*
		      0.000019538157, 0.000029681056, 0.000016285841,
		            0.000045572917, 0.000013777408, 0.000085082212, 0.000012272895, 0.00022904898, 0.000011470952,
		            0.0020298291, 0.99501488, 0.0020298291, 0.000011470952, 0.00022904898, 0.000012272895,
		            0.000085082212, 0.000013777408, 0.000045572917, 0.000016285841, 0.000029681056, 0.000019538157,
		            */


		            0.0,
		            0.0, 0.0, 0.0, 0.0, 0.0,
		            0.0, 0.0, 1.0, 0.0, 0.0,
		            0.0, 0.0, 0.0, 0.0, 0.0,
		            0.0, 0.0, 0.0, 0.0, 0.0
};

static double outa_filter1_coef[21] = {

		-0.0043883602, 0.00031565442, 0.0017003562,
			-0.013089587, -0.050334464, -0.094678034, -0.10854188, -0.057842500, 0.052184995,
			0.16681251, 0.21572262, 0.16681251, 0.052184995, -0.057842500, -0.10854188,
			-0.094678034, -0.050334464, -0.013089587, 0.0017003562, 0.00031565442, -0.0043883602




};


//10.7MHz BPF
static double outa_filter2_coef[21] = {
		-0.013109596, 0.0017077012, 0.020202769,
			0.028292382, 0.0037295214, -0.042571224, -0.061360345, -0.0032092702, 0.13130295,
			0.27526412, 0.33749876, 0.27526412, 0.13130295, -0.0032092702, -0.061360345,
			-0.042571224, 0.0037295214, 0.028292382, 0.020202769, 0.0017077012, -0.013109596
};


static double outa_filter3_coef[21] = {
		/*
		0.00019650309, -0.0011634096, -0.0029005943,
			-0.0030360476, 0.0013716988, 0.0055533369, -0.014427315, -0.034860653, -0.14142311,
			0.22235950, 0.70580393, 0.22235950, -0.14142311, -0.034860653, -0.014427315,
			0.0055533369, 0.0013716988, -0.0030360476, -0.0029005943, -0.0011634096, 0.00019650309
			*/
		/*
		 0.0037293212, 0.0026582177, -0.0052461240,
			-0.026234382, -0.060484918, -0.093310896, -0.097989150, -0.041391629, 0.048577946,
			0.24839704, 0.40958283, 0.24839704, 0.048577946, -0.041391629, -0.097989150,
			-0.093310896, -0.060484918, -0.026234382, -0.0052461240, 0.0026582177, 0.0037293212
			*/
		/*
		0.0035921455, 0.0050803075, 0.010399698,
			0.015523064, 0.025171368, 0.036328236, 0.061582277, 0.046174460, 0.13089438,
			-0.023983045, 0.25892037, -0.023983045, 0.13089438, 0.046174460, 0.061582277,
			0.036328236, 0.025171368, 0.015523064, 0.010399698, 0.0050803075, 0.0035921455
			*/
		/*
		0.0011960867, 0.0082956604, 0.019339728,
			0.018077735, -0.014784497, -0.075236340, -0.12058392, -0.095022718, 0.014027448,
			0.14540166, 0.20446608, 0.14540166, 0.014027448, -0.095022718, -0.12058392,
			-0.075236340, -0.014784497, 0.018077735, 0.019339728, 0.0082956604, 0.0011960867
			*/

/*
		-0.010687340, -0.019184051, -0.022726080,
			-0.010702403, -0.0090843826, -0.069877442, -0.17183078, -0.16522121, 0.078960044,
			0.44708806, 0.62740986, 0.44708806, 0.078960044, -0.16522121, -0.17183078,
			-0.069877442, -0.0090843826, -0.010702403, -0.022726080, -0.019184051, -0.010687340
			*/
			-0.0028668121, -0.0059479118, -0.0024964532,
				0.014065051, 0.015272200, -0.050134869, -0.16432914, -0.18986124, -0.0040242847,
				0.30052693, 0.45256446, 0.30052693, -0.0040242847, -0.18986124, -0.16432914,
				-0.050134869, 0.015272200, 0.014065051, -0.0024964532, -0.0059479118, -0.0028668121
};










struct dac_channel_regs {

	uint32_t gain;
	uint32_t offset;
	uint32_t filter_coef;
	uint32_t mux;
	uint32_t raw;
	uint32_t dds_cfg;
	uint32_t dds_step;
	uint32_t stat_cfg;
	uint32_t stat_min;
	uint32_t stat_max;
	uint32_t stat_limit;
	uint32_t stat_count;
	uint32_t att;
	uint32_t amp_en;
	uint32_t led;
	uint32_t dds_fm_mux;
	uint32_t dds_fm_raw;
	uint32_t dds_fm_gain;
	uint32_t dds_fm_offset;

};




void init_dac_channel_regs(struct dac_channel_regs *regs);


#endif
